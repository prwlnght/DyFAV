head(lsu)
head(ufo)
x[n]
x <- ts({0, -1})
x <- {}
x <- {0, -1, -1.2, 2, 1.4, 1.4, .5, 0, -.8}
x <- c(0, -1, -1.2, 2, 1.4, 1.4, .5, 0, -.8)
x
h <- c(1, -.5, -.2, -.1)
x*h
h*x
x[1]
output<- c()
output[1] <- h[1]*x[1]
output
output1[1] <- h[1]*x[1]
output1 <- c()
output1[1] <- h[1]*x[1]
output1[2] <- h[2]*x[1]
output1[3] <- h[3]*x[1]
output1[4] <- h[4]*x[1]
ouput1
output1
output2 <- c()
output2[1] <- 0
output2[2] <- x[2]*h[1]
output2[3] <- x[3]*h[1]
output2[4] <- x[4]*h[1]
output2[2] <- x[2]*h[2]
output2[3] <- x[2]*h[2]
intermediate_output <- list()
intermediate_output
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
output_length
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
output_length
convolve(input_signal, kernel)
temp_output <- numeric[output_length]
temp_output <- numeric[10]
temp_output <- numeric(10)
temp_output
temp_output <- 1
temp_output
temp_output <- numeric(10)
lapply(temp_output, 1)
lapply(temp_output, mean)
lapply(temp_output, mode)
lapply(temp_output, FUN = mean)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
lapply(temp_output, FUN = init)
lapply(temp_output, FUN = init)
apply(temp_output, FUN = init)
apply(temp_output,1, FUN = init)
apply(temp_output,1, mean)
sapply(temp_output, mean)
sapply(temp_output, init)
sapply(temp_output, init)
sapply(temp_output, FUN = init)
sapply(temp_output, function(x) typeof(x))
sapply(temp_output, FUN = init(x))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
lapply(temp_output, function(x) typeof(x))
lapply(temp_output, FUN = init(x)}
lapply(temp_output, FUN = init(x))
lapply(temp_output, function(x) init(x))
source('~/.active-rstudio-document')
lapply(temp_output, function(x) init(x))
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
convolution_IM
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolution_IM
convolve(input_signal, kernel)
debugSource('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
debugSource('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
temp_output
convolution_IM
length(convolution_IM)
debugSource('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
debugSource('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolution_IM[length(convolution_IM)+1] <- temp_output
convolve(input_signal, kernel)
convolution_IM[length(convolution_IM)+1] <- temp_output
convolution_IM
convolution_IM[1]
convolution_IM[1] <- c(0,0)
convolution_IM[[1]] <- c(0,0)
debugSource('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
plot(input_signal)
par(mfrow=c(2,2))
plot(input_signal)
plot(input_signal)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
plot(input_signal)
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
source('~/Google Drive/School/Fall2015/DigitalVideoProcessing/blackbox/Convolution.R')
convolve(input_signal, kernel)
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
height_table1 <- c(97.52, 97.31, 88, 85)
table1_cols <- rgb(runif(3), runif(3), runif(3))
barplot(height_table1, names.arg = c(4,3,2,1), col = table1_cols , ylim = c(0, 100))
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 95.45, 95.45)
table2.args <- list_of_algorithms
barplot(height_table2, names.arg = table2.args, ylim = c(0,100), col= table2_cols)
list_of_algorithms <- c("all",
"emg", "accl", "orient",
"accl_emg", "accl_orient", "emg_orient")
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 95.45, 95.45)
table2.args <- list_of_algorithms
barplot(height_table2, names.arg = table2.args, ylim = c(0,100), col= table2_cols)
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 95.45, 95.45)
table2.args <- list_of_algorithms
barplot(height_table2, names.arg = table2.args, ylim = c(0,100), col= table2_cols)
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 94.42, 95.45)
table2.args <- list_of_algorithms
barplot(height_table2, density=seq(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 94.42, 95.45)
table2.args <- list_of_algorithms
barplot(height_table2, density=c(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
k = barplot(height_table2, density=c(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
text(k,height_table2, labels = height_table2, pos =3 )
text(k,height_table2, labels = height_table2, line =3 )
mtext(side =1, at = k,  text = height_table2, line =3 )
text(k,height_table2, labels = height_table2, pos =2 )
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 94.42, 95.45)
table2.args <- list_of_algorithms
k = barplot(height_table2, density=c(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
text(k,height_table2, labels = height_table2, pos =2 )
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 94.42, 95.45)
table2.args <- list_of_algorithms
k = barplot(height_table2, density=c(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
text(k,height_table2, labels = height_table2, pos = 1 )
table2_cols <- rgb(runif(5), runif(5), runif(5))
height_table2 <- c(97.72, 88.64, 81.81, 93.18, 90.90, 94.42, 95.45)
table2.args <- list_of_algorithms
k = barplot(height_table2, density=c(5,35,10,45,7,30,15 ), angle = c(0,90, 45, 90, 0, 30, 20), names.arg = table2.args, ylim = c(0,100), col= table2_cols)
text(k,height_table2, labels = height_table2, pos = 1 )
#features
par(bg='blue4')
plot(0)
text(1,0, this_sign, col="white", cex=11)
par(bg='blue4')
plot(0)
text(1,0, 'headache', col="white", cex=11)
plot(0)
text(1,0, 'headache', col="white", cex=11)
text(1,0, 'headache', col="white", cex=11)
par(bg='blue4')
plot(0)
text(1,0, 'headache', col="white", cex=11)
setwd('/Users/lizard/Google Drive/School/Research/Projects/Hand/Data/Alphabet/Shibani_0212016/')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
source('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
segmentation_length
getwd()
filenames_all
test0
filenames_all[1]
segmentations
number_of_feature_columns
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
feature_column_names
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
feature_column_names
feature_column_names[1]
feature_column_counter
this_column_name
feature_column_names
feature_column_names
feature_column_names
feature_column_names[feature_column_counter] <- 'blah'
this_column_name
feature_column_names
feature_column_names[1]
feature_column_names[1] <- 'blah'
feature_column_names[1]
feature_column_names
feature_column_names[2] <<- '2blah'
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
feature_column_names
feature_column_counter
feature_column_counter
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
feature_column_counter
feature_column_names
feature_column_counter
feature_column_names
feature_column_names
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
test1
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
feature_row_names
features_extracted
source('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
outputfilename
outputfilepath
getwd()
getwd()
subDir <- "features"
file.exists(subDir)
dir.create(file.path(getwd(), subDir)
)
file.exists(subDir)
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
getwd()
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
warnings
warnings()
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
signed_features
rownames(signed_features)
normalization_which[1]
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
this_alphabet_number
main_counter
sorted_list
main_counter
this_diff
this_dff
signed_features[1]
signed_features[,1]
head(signed_features[1:85], 1)
dff
dff[feature_name_index]
this_range
this_dff
to_test
this_range
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
this_range
sorted_list
sorted_list
rownames(sorted_list)
rownames(this_dff)
to_test
which(sapply(rownames(this_dff), function(x) any(grepl(to_test, x))))
any(grepl(to_test, to_test)
)
to_test
sapply(rownames(this_dff), function(x) any(grepl(to_test, x))))
sapply(rownames(this_dff), function(x) any(grepl(to_test, x)))
which(sapply(rownames(this_dff), function(x) any(grepl(to_test, x))))
rownames(sorted_list)
rownames(this_dff)
grepl(to_test, rownames(this_dff))
to_test
to_test <- alphabeta
to_test <- 'alphabeta''
''
to_test <- 'alphabeta'
grepl(to_test, rownames(this_dff))
range(which(sapply(rownames(this_dff), function(x) any(grepl(to_test, x)))))
signed_features[,1]
rownames(signed_features)
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher.R')
source('~/.active-rstudio-document')
confusion_matrix_alphabets
setwd('/Users/lizard/Google Drive/School/Research/Projects/Hand/Data/Alphabet/Shibani_0212016/Alphabets/features/')
setwd('/Users/lizard/Google Drive/School/Research/Projects/Hand/Data/Alphabet/Shibani_0212016/features/')
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
this_features
x
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
mletter
test_sing[1]
test_sign[1]
this_feature_name
features_to_use
subset_for_this
this_alphabet_in_features
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
subset_for_this
this_feature_metrics
this_features_metrics
debugSource('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
subset_for_this
features_to_use
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
segmentation_length
filenames_all
debugSource('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
outputfilename
source('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
warnings()
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
signed_features
signed_features
rownames(signed_features)
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
rownames(signed_features)
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
rownames(signed_features)
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
source('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
confusion_matrix_alphabets
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
confusion_matrix_alphabets
source('~/Development/gitRepos/Hands/Rcodes/alphabet_aggregator.R')
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
filenames_all <- list.files(pattern ="csv", full.names=TRUE)
length(filenames_all)
debugSource('~/Development/gitRepos/Hands/Rcodes/Alphabet.R')
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
outputfilename <- paste(Sys.Date(), confusion_matrix, sep="_")
Sys.Date()
outputfilename <- paste(Sys.Date(), "confusion_matrix", sep="_")
outputfilename
outputfilename <- paste(Sys.Date(), "confusion_matrix", sep="_")
#write all features to one file
write.csv(confusion_matrix_alphabets, file= outputfilename)
rm(list = ls())
confusion_matrix_alphabets
source('~/Development/gitRepos/Hands/Rcodes/AlphabetMatcher_A_working.R')
confusion_matrix_alphabets
outputfilename
getwd()
write.csv(confusion_matrix_alphabets, file= outputfilename)
confusionMatrix(confusion_matrix_alphabets)
package(caret)
require(caret)
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
install.packages('caret')
